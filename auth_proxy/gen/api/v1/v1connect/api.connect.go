// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/api.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/kilimnik/vepiot/auth_proxy/gen/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "api.v1.Service"
)

// ServiceClient is a client for the api.v1.Service service.
type ServiceClient interface {
	SendTOTP(context.Context, *connect_go.Request[v1.SendTOTPRequest]) (*connect_go.Response[v1.SendTOTPResponse], error)
	GetTOTP(context.Context, *connect_go.Request[v1.GetTOTPRequest]) (*connect_go.Response[v1.GetTOTPResponse], error)
}

// NewServiceClient constructs a client for the api.v1.Service service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		sendTOTP: connect_go.NewClient[v1.SendTOTPRequest, v1.SendTOTPResponse](
			httpClient,
			baseURL+"/api.v1.Service/SendTOTP",
			opts...,
		),
		getTOTP: connect_go.NewClient[v1.GetTOTPRequest, v1.GetTOTPResponse](
			httpClient,
			baseURL+"/api.v1.Service/GetTOTP",
			opts...,
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	sendTOTP *connect_go.Client[v1.SendTOTPRequest, v1.SendTOTPResponse]
	getTOTP  *connect_go.Client[v1.GetTOTPRequest, v1.GetTOTPResponse]
}

// SendTOTP calls api.v1.Service.SendTOTP.
func (c *serviceClient) SendTOTP(ctx context.Context, req *connect_go.Request[v1.SendTOTPRequest]) (*connect_go.Response[v1.SendTOTPResponse], error) {
	return c.sendTOTP.CallUnary(ctx, req)
}

// GetTOTP calls api.v1.Service.GetTOTP.
func (c *serviceClient) GetTOTP(ctx context.Context, req *connect_go.Request[v1.GetTOTPRequest]) (*connect_go.Response[v1.GetTOTPResponse], error) {
	return c.getTOTP.CallUnary(ctx, req)
}

// ServiceHandler is an implementation of the api.v1.Service service.
type ServiceHandler interface {
	SendTOTP(context.Context, *connect_go.Request[v1.SendTOTPRequest]) (*connect_go.Response[v1.SendTOTPResponse], error)
	GetTOTP(context.Context, *connect_go.Request[v1.GetTOTPRequest]) (*connect_go.Response[v1.GetTOTPResponse], error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/api.v1.Service/SendTOTP", connect_go.NewUnaryHandler(
		"/api.v1.Service/SendTOTP",
		svc.SendTOTP,
		opts...,
	))
	mux.Handle("/api.v1.Service/GetTOTP", connect_go.NewUnaryHandler(
		"/api.v1.Service/GetTOTP",
		svc.GetTOTP,
		opts...,
	))
	return "/api.v1.Service/", mux
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) SendTOTP(context.Context, *connect_go.Request[v1.SendTOTPRequest]) (*connect_go.Response[v1.SendTOTPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.Service.SendTOTP is not implemented"))
}

func (UnimplementedServiceHandler) GetTOTP(context.Context, *connect_go.Request[v1.GetTOTPRequest]) (*connect_go.Response[v1.GetTOTPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.Service.GetTOTP is not implemented"))
}
